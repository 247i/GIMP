${SegmentFile}

!addincludedir "${PACKAGE}\App\AppInfo\Launcher"
!include ReadINIStrWithDefault.nsh

Var EXISTSTHUMBNAILS
Var EXISTSFONTSCACHE
Var EXISTSGTKBOOKMARKS
Var EXISTSFONTCONFIG
Var EXISTSFILECHOOSER
Var EXISTSGEGL
Var USERPROFILE
Var RENAMEDINCOMPATIBLEFILES
Var AUTOFIXINCOMPATIBLEFILES
Var CustomBits
Var GSMode
Var GSDirectory
Var GSRegExists
Var GSExecutable

;=== START INTEGRITY CHECK 1.1 Var
	Var bolCustomIntegrityCheckStartUnsupported
	Var strCustomIntegrityCheckVersion
;=== END INTEGRITY CHECK

Function _Ghostscript_ValidateInstall
	${If} $Bits = 64
		${If} ${FileExists} $GSDirectory\bin\gswin64c.exe
			StrCpy $GSExecutable $GSDirectory\bin\gswin64c.exe
			;${DebugMsg} "Found valid 64-bit Ghostscript install at $GSDirectory."
			StrCpy $R8 "Found valid 64-bit Ghostscript install at $GSDirectory."
			Push true
			Goto End
		${Else}
			;${DebugMsg} "64-bit Windows but gswin64c.exe not found; trying gswin32c.exe instead."
			StrCpy $R8 "64-bit Windows but gswin64c.exe not found; trying gswin32c.exe instead.$\r$\n"
		${EndIf}
	${EndIf}

	${IfNot} ${FileExists} $GSDirectory\bin\gswin32c.exe
		StrCpy $GSDirectory ""
		StrCpy $GSExecutable ""
		;${DebugMsg} "No valid Ghostscript install found at $GSDirectory."
		StrCpy $R8 "$R8No valid Ghostscript install found at $GSDirectory."
		Push false
		Goto End
	${EndIf}

	StrCpy $GSExecutable $GSDirectory\bin\gswin32c.exe
	;${DebugMsg} "Found valid 32-bit Ghostscript install at $GSDirectory."
	StrCpy $R8 "$R8Found valid 32-bit Ghostscript install at $GSDirectory."
	Push true
	Goto End

	End:
FunctionEnd
!macro _Ghostscript_ValidateInstall _a _b _t _f
	!insertmacro _LOGICLIB_TEMP
	;${DebugMsg} "Checking for Ghostscript in $GSDirectory..."
	;${DebugMsg} `$R8`
	Call _Ghostscript_ValidateInstall
	Pop $_LOGICLIB_TEMP
	!insertmacro _== $_LOGICLIB_TEMP true `${_t}` `${_f}`
!macroend
!define IsValidGhostscriptInstall `"" Ghostscript_ValidateInstall ""`

${Segment.OnInit}
	; Borrowed the following from PAL 2.2, Remove on release of PAL 2.2
		; Work out if it's 64-bit or 32-bit
	System::Call kernel32::GetCurrentProcess()i.s
	System::Call kernel32::IsWow64Process(is,*i.r0)
	${If} $0 == 0
		StrCpy $Bits 32
	${Else}
		StrCpy $Bits 64
	${EndIf}
	
	StrCpy $0 $Bits
	${SetEnvironmentVariable} CustomBits $0
	
	;=== START INTEGRITY CHECK 1.1 OnInit
	;Check for improper install/upgrade without running the PA.c Installer which can cause issues
	;Designed to not require ReadINIStrWithDefault which is not included in the PA.c Launcher code
	
	${If} ${FileExists} "$EXEDIR\App\AppInfo\appinfo.ini"
		${If} ${FileExists} "$EXEDIR\App\AppInfo\pac_installer_log.ini"
			ReadINIStr $R0 "$EXEDIR\App\AppInfo\pac_installer_log.ini" "PortableApps.comInstaller" "Info2"
			${If} $R0 == "This file was generated by the PortableApps.com Installer wizard and modified by the official PortableApps.com Installer TM Rare Ideas, LLC as the app was installed."
				StrCpy $R1 "true"
			${Else}
				StrCpy $R1 "false"
			${EndIf}
		${Else}
			StrCpy $R1 "false"
		${EndIf}
	${Else}
		StrCpy $R1 "true"
	${EndIf}
	
	${If} $R1 == "false"
		;Upgrade or install sans the PortableApps.com Installer which can cause compatibility issues
		ClearErrors
		ReadINIStr $0 "$EXEDIR\App\AppInfo\appinfo.ini" "Version" "PackageVersion"
		${If} ${Errors}
		${OrIf} $0 == ""
			StrCpy $0 "0.0.0.1"
			ClearErrors
		${EndIf}

		ClearErrors
		ReadINIStr $1 "$EXEDIR\Data\settings\${AppID}Settings.ini" "${AppID}Settings" "InvalidPackageWarningShown"
		${If} ${Errors}
		${OrIf} $1 == ""
			StrCpy $1 "0.0.0.0"
			ClearErrors
		${EndIf}

		${VersionCompare} $0 $1 $2
		${If} $2 == 1		
			MessageBox MB_YESNO|MB_ICONQUESTION|MB_DEFBUTTON2 `Integrity Failure Warning: ${NamePortable} was installed or upgraded without using its installer and some critical files may have been modified.  This could cause data loss, personal data left behind on a shared PC, functionality issues, and/or may be a violation of the application's license. Neither the application publisher nor PortableApps.com will be responsible for any issues you encounter.$\r$\n$\r$\nWould you like to start ${NamePortable} in its current unsupported state?` IDYES CustomIntegrityCheckGotoStartAnyway IDNO CustomIntegrityCheckGotoDownloadQuestion
		
			CustomIntegrityCheckGotoDownloadQuestion:
			;Check to ensure we have a valid homepage before asking the user
			StrCpy $R0 ""
			${If} ${FileExists} "$EXEDIR\App\AppInfo\appinfo.ini"
				ReadINIStr $R0 "$EXEDIR\App\AppInfo\appinfo.ini" "Details" "Homepage"
			${EndIf}
			
			${If} $R0 == ""
				Abort
			${Else}
				StrCpy $R1 $R0 4
				${If} $R1 != "http"
				${AndIf} $R1 != "HTTP"
					StrCpy $R0 "http://$R0"
				${EndIf}
			${EndIf}
			
			MessageBox MB_YESNO|MB_ICONQUESTION|MB_DEFBUTTON1 `Would you like to visit the ${NamePortable} homepage to download the app and upgrade your current install?` IDYES CustomIntegrityCheckGotoURL IDNO CustomIntegrityCheckGotoAbort

			CustomIntegrityCheckGotoURL:		
			ExecShell "open" $R0
			Abort
						
			CustomIntegrityCheckGotoAbort:
			Abort
	
			CustomIntegrityCheckGotoStartAnyway:
			StrCpy $bolCustomIntegrityCheckStartUnsupported true
			StrCpy $strCustomIntegrityCheckVersion $0
		${EndIf}
	${EndIf}
	;=== END INTEGRITY CHECK
	
	
	;=== BEGIN OLD DLL CHECK
	${If} ${FileExists} "$EXEDIR\App\gimp\bin\libhistory7.dll"
	${AndIf} ${FileExists} "$EXEDIR\App\gimp\bin\libhistory8.dll"
		MessageBox MB_OK|MB_ICONEXCLAMATION `This copy of GIMP Portable is corrupt and contains files for two different versions. It will not function properly in its current state. Please ensure the app is only updated using its official installer.`

		;Check to ensure we have a valid homepage before asking the user
		StrCpy $R0 ""
		${If} ${FileExists} "$EXEDIR\App\AppInfo\appinfo.ini"
			ReadINIStr $R0 "$EXEDIR\App\AppInfo\appinfo.ini" "Details" "Homepage"
		${EndIf}
		
		${If} $R0 != ""
			StrCpy $R1 $R0 4
			${If} $R1 != "http"
			${AndIf} $R1 != "HTTP"
				StrCpy $R0 "http://$R0"
			${EndIf}
			
			MessageBox MB_YESNO|MB_ICONQUESTION|MB_DEFBUTTON1 `Would you like to visit the ${NamePortable} homepage to download and try a fresh install?` IDYES CustomUpgradeCheckGotoURL IDNO CustomUpgradeCheckGotoAbort

			CustomUpgradeCheckGotoURL:		
				ExecShell "open" $R0
		
			CustomUpgradeCheckGotoAbort:
	
		${EndIf}
		Abort
	${EndIf}
	;=== END OLD DLL CHECK
!macroend

${SegmentInit}
	${ReadINIStrWithDefault} $AUTOFIXINCOMPATIBLEFILES "%PAL:DataDir%\settings\GIMPPortableTestSettings" "GIMPPortableTestSettings" "AutofixIncompatibleFiles" "false"
	
	;=== Check for incompatible files and fix, if desired
	IfFileExists "$WINDIR\system32\xmlparse.dll" IncompatibleFilesFound
	IfFileExists "$WINDIR\system32\xmltok.dll" IncompatibleFilesFound
	IfFileExists "$WINDIR\system\xmlparse.dll" IncompatibleFilesFound
	IfFileExists "$WINDIR\system\xmltok.dll" IncompatibleFilesFound
	Goto IncompatibleFilesHandled
		
	IncompatibleFilesFound:
		StrCmp $AUTOFIXINCOMPATIBLEFILES "true" FixIncompatibleFiles
		MessageBox MB_YESNO|MB_ICONQUESTION `Some files (xmlparse.dll, xmltok.dll) were found on this PC that are incompatible with GIMP Portable.  Would you like to temporariliy disable these files while GIMP Portable is running?` IDYES FixIncompatibleFiles
		MessageBox MB_YESNO|MB_ICONQUESTION `Without disabling these files, GIMP Portable may fail to work correctly.  Would you like to continue using GIMP Portable anyway?` IDYES IncompatibleFilesHandled
		Abort
		
	FixIncompatibleFiles:
		Rename "$WINDIR\system32\xmlparse.dll" "$WINDIR\system32\xmlparse.dll.disabled"
		Rename "$WINDIR\system32\xmltok.dll" "$WINDIR\system32\xmltok.dll.disabled"
		Rename "$WINDIR\system\xmlparse.dll" "$WINDIR\system\xmlparse.dll.disabled"
		Rename "$WINDIR\system\xmltok.dll" "$WINDIR\system\xmltok.dll.disabled"
		StrCpy $RENAMEDINCOMPATIBLEFILES "true"

	IncompatibleFilesHandled:
	
	;Check for extraneous files
	CheckForUserProfileFolders:
		IfFileExists "$DOCUMENTS\gegl-0.0" 0 +2
			StrCpy $EXISTSGEGL "true"
		ReadEnvStr $USERPROFILE "USERPROFILE"
		IfFileExists "$USERPROFILE\.fonts.cache-1" 0 +2
			StrCpy $EXISTSFONTSCACHE "true"
		IfFileExists "$USERPROFILE\.gtk-bookmarks" 0 +2
			StrCpy $EXISTSGTKBOOKMARKS "true"
		IfFileExists "$USERPROFILE\.thumbnails\*.*" 0 +2
			StrCpy $EXISTSTHUMBNAILS "true"
		;IfFileExists "$TEMP\fontconfig\*.*" 0 CopyFontConfigLocally
		;	StrCpy $EXISTSFONTCONFIG "true"
		;	Goto CheckForFileChooser

		;CopyFontConfigLocally:
		;	CreateDirectory "$TEMP\fontconfig\cache\"
		;	CopyFiles /SILENT "$PAL:DataDir\.gimp\fontconfig\cache\*.*" "$TEMP\fontconfig\cache"

		CheckForFileChooser:
		IfFileExists "$APPDATA\gtk-2.0\gtkfilechooser.ini" 0 +2
			StrCpy $EXISTSFILECHOOSER "true"
!macroend

${SegmentPrePrimary}
	;=== START INTEGRITY CHECK 1.1 PrePrimary
	${If} $bolCustomIntegrityCheckStartUnsupported == true
		WriteINIStr "$EXEDIR\Data\settings\${AppID}Settings.ini" "${AppID}Settings" "InvalidPackageWarningShown" $strCustomIntegrityCheckVersion
	${EndIf}	
	;=== END INTEGRITY CHECK
	
	;32v64bit file movements
	${If} $Bits = 64
		${If} ${FileExists} "$EXEDIR\App\gimp64\*.*"
			Rename "$EXEDIR\App\gimp\bin" "$EXEDIR\App\gimp64\32\bin"
			Rename "$EXEDIR\App\gimp\share" "$EXEDIR\App\gimp64\share"
			Rename "$EXEDIR\App\gimp\etc" "$EXEDIR\App\gimp64\etc"
			Rename "$EXEDIR\App\gimp" "$EXEDIR\App\gimp32"
			Rename "$EXEDIR\App\gimp64" "$EXEDIR\App\gimp"
		${EndIf}
	${Else}
		;${If} ${IsWin7}
		;	MessageBox MB_OK|MB_ICONEXCLAMATION "GIMP is currently broken when run on 32-bit Windows 7 and has been for about a year. The patched version of GLIB PortableApps.com had used to work around this issue no longer works. GIMP will usually crash when attempting to open, save, or create new files as well as in other situations. The last functional version of GIMP Portable on this operating system is 2.10.6 Rev 2."
		;${EndIf}
		${If} ${FileExists} "$EXEDIR\App\gimp32\*.*"
			Rename "$EXEDIR\App\gimp\32\bin" "$EXEDIR\App\gimp32\bin"
			Rename "$EXEDIR\App\gimp\share" "$EXEDIR\App\gimp32\share"
			Rename "$EXEDIR\App\gimp\etc" "$EXEDIR\App\gimp32\etc"
			Rename "$EXEDIR\App\gimp" "$EXEDIR\App\gimp64"
			Rename "$EXEDIR\App\gimp32" "$EXEDIR\App\gimp"
		${EndIf}
	${EndIf}
	
	;SVG class fix necessary for SVG icons to work properly
	${registry::Read} "HKEY_LOCAL_MACHINE\SOFTWARE\Classes\.svg" "Content Type" $R0 $R1
	${If} $R0 != "image/svg+xml"
		${registry::Read} "HKEY_CURRENT_USER\SOFTWARE\Classes\.svg" "Content Type" $R0 $R1
		${If} $R0 != "image/svg+xml"
			${registry::Write} "HKEY_CURRENT_USER\SOFTWARE\Classes\.svg" "Content Type" "image/svg+xml" "REG_SZ" $R1
		${EndIf}
	${EndIf}
	
	;pygimp.interp
	Delete "$EXEDIR\App\gimp\lib\gimp\2.0\interpreters\pygimp.interp"
	CopyFiles /SILENT "$EXEDIR\App\pygimp.interp" "$EXEDIR\App\gimp\lib\gimp\2.0\interpreters"
!macroend

${SegmentPre}	
	; If [Activate]:Ghostscript=find|require, search for Ghostscript in the
	; following locations (in order):
	;
	;  - PortableApps.com CommonFiles (..\CommonFiles\Ghostscript)
	;  - GS_PROG (which will be $GSDirectory\bin\gswin(32|64)c.exe)
	;  - Anywhere in %PATH% (with SearchPath)
	;
	; If it's in none of those, give up. [Activate]:Ghostscript=require will
	; then abort, [Activate]:Ghostscript=find will not set it.
	ClearErrors
	${ReadLauncherConfig} $GSMode Activate Ghostscript
	${If} $GSMode == find
	${OrIf} $GSMode == require
		StrCpy $GSDirectory $PortableAppsDirectory\CommonFiles\Ghostscript
		${IfNot} ${IsValidGhostscriptInstall}
			ReadEnvStr $GSDirectory GS_PROG
			${GetParent} $GSDirectory $GSDirectory
			${GetParent} $GSDirectory $GSDirectory
			${IfNot} ${IsValidGhostscriptInstall}
				ClearErrors
				SearchPath $GSDirectory gswin32c.exe
				${GetParent} $GSDirectory $GSDirectory
				${GetParent} $GSDirectory $GSDirectory
				${IfNot} ${IsValidGhostscriptInstall}
					; If not valid, ${IsValidGhostscriptInstall} will clear
					; $GSDirectory for us.
					Nop
				${EndIf}
			${EndIf}
		${EndIf}

		; If Ghostscript is required and not found, quit
		${If} $GSMode == require
		${AndIf} $GSDirectory == ""
			MessageBox MB_OK|MB_ICONSTOP `$(LauncherNoGhostscript)`
			Quit
		${EndIf}

		; This may be created; check if it exists before: 0 = exists
		${registry::KeyExists} "HKCU\Software\GPL Ghostscript" $GSRegExists

		;${DebugMsg} "Selected Ghostscript path: $GSDirectory"
		;${DebugMsg} "Selected Ghostscript executable: $GSExecutable"
		ReadEnvStr $0 PATH
		StrCpy $0 "$0;$GSDirectory\bin"
		${SetEnvironmentVariablesPath} PATH $0
		${SetEnvironmentVariablesPath} GS_PROG $GSExecutable
	${ElseIfNot} ${Errors}
		${InvalidValueError} [Activate]:Ghostscript $GSMode
	${EndIf}
!macroend

${SegmentPost}
	; Ghostscript section
	${If} $GSRegExists != 0  ; Didn't exist before
	${AndIf} ${RegistryKeyExists} "HKCU\Software\GPL Ghostscript"
		${registry::DeleteKey} "HKCU\Software\GPL Ghostscript" $R9
	${EndIf}
	
	; Revert Incompatible Files
	StrCmp $RENAMEDINCOMPATIBLEFILES "true" "" SkipRename
	Rename "$WINDIR\system32\xmlparse.dll.disabled" "$WINDIR\system32\xmlparse.dll"
	Rename "$WINDIR\system32\xmltok.dll.disabled" "$WINDIR\system32\xmltok.dll"
	Rename "$WINDIR\system\xmlparse.dll.disabled" "$WINDIR\system\xmlparse.dll"
	Rename "$WINDIR\system\xmltok.dll.disabled" "$WINDIR\system\xmltok.dll"

	SkipRename:
	
    ; Delete existing extraneous files
	StrCmp $EXISTSFONTSCACHE "true" +2
		Delete "$USERPROFILE\.fonts.cache-1"
	StrCmp $EXISTSGTKBOOKMARKS "true" +2
		Delete "$USERPROFILE\.gtk-bookmarks"
	;StrCmp $EXISTSFONTCONFIG "true" +5
	;	Delete $PAL:DataDir\.gimp\fontconfig\cache\*.*
	;	CreateDirectory $PAL:DataDir\.gimp\fontconfig\cache
	;	CopyFiles /SILENT "$TEMP\fontconfig\cache\*.*" "$PAL:DataDir\.gimp\fontconfig\cache"
	;	RMDir /r "$TEMP\fontconfig\"
	StrCmp $EXISTSFILECHOOSER "true" TheRealEnd
		Delete "$APPDATA\gtk-2.0\gtkfilechooser.ini"
		RMDir "$APPDATA\gtk-2.0\"		

	TheRealEnd:
!macroend